{"version":3,"sources":["components/styles.js","App.js","reportWebVitals.js","index.js"],"names":["SpeedometerWrapper","styled","div","InternalCircle","CurrentSpeedTicks","props","isPastSpeed","angle","Ticks","isMajorTick","SpeedDisplayWrapper","SpeedNumber","h1","SpeedUnits","h6","document","body","style","range","start","count","Array","apply","map","element","index","App","useState","seconds","setSeconds","useEffect","myInterval","setInterval","clearInterval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"mPAEaA,EAAqBC,IAAOC,IAAV,iQAalBC,EAAiBF,IAAOC,IAAV,kIAWdE,EAAoBH,IAAOC,IAAV,kNAQZ,SAACG,GAAD,OAAYA,EAAMC,YAXJ,2IACI,wJAWnB,SAACD,GAAD,uBAAqBA,EAAME,MAA3B,QAMJC,EAAQP,IAAOC,IAAV,kNAQA,SAACG,GAAD,OAAYA,EAAMI,YAXJ,+GACA,kJAWf,SAACJ,GAAD,uBAAqBA,EAAME,MAA3B,QAGJG,EAAsBT,IAAOC,IAAV,oGAMnBS,EAAcV,IAAOW,GAAV,2IAQXC,EAAaZ,IAAOa,GAAV,2H,OCrDvBC,SAASC,KAAKC,MAAQ,qBAEtB,IAAMC,EAAQ,SAACC,EAAOC,GAAR,OAAkBC,MAAMC,MAAM,EAAGD,MAAMD,IAClDG,KAAI,SAACC,EAASC,GAAV,OAAoBA,EAAQN,MAuCpBO,EArCH,WAAO,IAAD,EACcC,mBAAS,GADvB,mBACTC,EADS,KACAC,EADA,KAiBhB,OAfAC,qBAAU,WACR,IAAMC,EAAaC,aAAY,WACb,MAAZJ,GACFK,cAAcF,GAGZH,GAAW,GAAKA,EAAU,KAC5BC,EAAWD,EAAU,KAEtB,KACH,OAAO,WACLK,cAAcF,OAKhB,8BACE,eAAC/B,EAAD,WACGkB,EAAM,EAAG,KAAKK,KACb,SAAChB,GAAD,OAAW,cAACH,EAAD,CAAmBG,MAAK,UAAMA,EAAQ,GAAd,OAAwBD,YAAaC,GAASqB,OAEnF,eAACzB,EAAD,WACGe,GAAO,GAAI,KAAKK,KACf,SAAChB,GAAD,OAAW,cAACC,EAAD,CAAOC,YAAaF,EAAQ,KAAO,EAAGA,MAAK,UAAa,EAARA,EAAL,YAExD,eAACG,EAAD,WACE,cAACC,EAAD,UAAciB,IACd,cAACf,EAAD,+BClCGqB,EAdS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAEnB,IADLC,EACI,EADJA,OAAQC,EACJ,EADIA,OAAQC,EACZ,EADYA,OAAQC,EACpB,EADoBA,OAAQC,EAC5B,EAD4BA,QAEhCJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF9B,SAAS+B,eAAe,SAM1BZ,M","file":"static/js/main.f8a79810.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const SpeedometerWrapper = styled.div`\n    width: 36em;\n    height: 36em;\n    top: 40%;\n    left: 40%;\n    margin: -150px 0 0 -100px;\n    background: black;\n    overflow: hidden;\n    border-radius: 50%;\n    border: 0.5em solid black;\n    position: absolute;\n`;\n\nexport const InternalCircle = styled.div`\n   width: 75%;\n   height: 75%;\n   margin: auto auto;\n   margin-top: 75px;\n   border-radius: 50%;\n`;\n\nconst PastSpeedLinearGradient = 'linear-gradient(90deg, rgba(2, 0, 36, 0) 0%, rgba(0, 0, 0, 0) 8%, rgba(212,175,55, 1) 8%, rgba(212,175,55, 1) 12%, rgba(0, 0, 0, 0) 12%)';\nconst UpcomingSpeedLinearGradient = 'linear-gradient(90deg, rgba(2, 0, 36, 0) 0%, rgba(0, 0, 0, 0) 8%, rgba(255, 255, 255, 0.1) 8%, rgba(255, 255, 255, 0.1) 12%, rgba(0, 0, 0, 0) 12%)';\n\nexport const CurrentSpeedTicks = styled.div`\n    background: black;\n    position: relative;\n    left: 0%;\n    top: 50%;\n    width: 100%;\n    height: 1%;\n    margin-bottom: -1%;\n    background: ${(props) => (props.isPastSpeed ? PastSpeedLinearGradient : UpcomingSpeedLinearGradient)};\n    transform: ${(props) => `rotate(${props.angle})`};\n`;\n\nconst MajorTickLinearGradient = 'linear-gradient(90deg, rgba(2, 0, 36, 0) 0%, rgba(0, 0, 0, 0) 4%, white 4%, white 12%, rgba(0, 0, 0, 0) 12%)';\nconst MinorTickLinearGradient = 'linear-gradient(90deg, rgba(2, 0, 36, 0) 0%, rgba(0, 0, 0, 0) 8%, rgba(212,175,55, 0.7) 8%, rgba(212,175,55, 0.7) 12%, rgba(0, 0, 0, 0) 12%)';\n\nexport const Ticks = styled.div`\n    background: black;\n    position: relative;\n    left: 0%;\n    top: 50%;\n    width: 100%;\n    height: 1%;\n    margin-bottom: -1%;\n    background: ${(props) => (props.isMajorTick ? MajorTickLinearGradient : MinorTickLinearGradient)};\n    transform: ${(props) => `rotate(${props.angle})`};\n`;\n\nexport const SpeedDisplayWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: flex-end;\n`;\n\nexport const SpeedNumber = styled.h1`\n  text-align: center;\n  color: white;\n  font-size: xxx-large;\n  padding-top: 150px;\n  margin-bottom: 0px;\n`;\n\nexport const SpeedUnits = styled.h6`\n  color: rgba(212,175,55, 1);\n  margin-left: 4px;\n  margin-top: 0px;\n  margin-bottom: 8px;\n`;\n","/* eslint-disable react/jsx-filename-extension */\n/* eslint-disable import/extensions */\nimport React, { useState, useEffect } from 'react';\n\nimport {\n  SpeedometerWrapper,\n  InternalCircle,\n  CurrentSpeedTicks,\n  Ticks,\n  SpeedDisplayWrapper,\n  SpeedNumber,\n  SpeedUnits,\n} from './components/styles.js';\n\ndocument.body.style = 'background: black;';\n\nconst range = (start, count) => Array.apply(0, Array(count))\n  .map((element, index) => index + start);\n\nconst App = () => {\n  const [seconds, setSeconds] = useState(0);\n  useEffect(() => {\n    const myInterval = setInterval(() => {\n      if (seconds === 220) {\n        clearInterval(myInterval);\n      }\n\n      if (seconds >= 0 && seconds < 220) {\n        setSeconds(seconds + 1);\n      }\n    }, 1000);\n    return () => {\n      clearInterval(myInterval);\n    };\n  });\n\n  return (\n    <div>\n      <SpeedometerWrapper>\n        {range(0, 220).map(\n          (angle) => <CurrentSpeedTicks angle={`${(angle - 20)}deg`} isPastSpeed={angle <= seconds} />,\n        )}\n        <InternalCircle>\n          {range(-10, 110).map(\n            (angle) => <Ticks isMajorTick={angle % 10 === 0} angle={`${angle * 2}deg`} />,\n          )}\n          <SpeedDisplayWrapper>\n            <SpeedNumber>{seconds}</SpeedNumber>\n            <SpeedUnits>km/h</SpeedUnits>\n          </SpeedDisplayWrapper>\n        </InternalCircle>\n      </SpeedometerWrapper>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}